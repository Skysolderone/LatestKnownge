// Code generated by goa v3.20.1, DO NOT EDIT.
//
// hello endpoints
//
// Command:
// $ goa gen goademo/design

package hello

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "hello" service endpoints.
type Endpoints struct {
	Say goa.Endpoint
}

// NewEndpoints wraps the methods of the "hello" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Say: NewSayEndpoint(s),
	}
}

// Use applies the given middleware to all the "hello" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Say = m(e.Say)
}

// NewSayEndpoint returns an endpoint function that calls the method "say" of
// service "hello".
func NewSayEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(string)
		return s.Say(ctx, p)
	}
}
